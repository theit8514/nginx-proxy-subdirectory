{{ range $subdir, $containers := groupByMulti $ "Env.NGINX_PROXY_SUBDIRECTORY" "," }}
upstream {{ $subdir }} {
{{ range $index, $value := $containers }}
	{{ $addrLen := len $value.Addresses }}
	{{/* If only 1 port exposed, use that */}}
	{{ if eq $addrLen 1 }}
		{{ with $address := index $value.Addresses 0 }}
	server {{ $address.IP }}:{{ $address.Port }};
		{{ end }}
	{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
	{{ else if $value.Env.VIRTUAL_PORT }}
		{{ range $i, $address := $value.Addresses }}
		   {{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
	server {{ $address.IP }}:{{ $address.Port }};
		   {{ end }}
		{{ end }}
	{{/* Else default to standard web port 80 */}}
	{{ else }}
		{{ range $i, $address := $value.Addresses }}
			{{ if eq $address.Port "80" }}
	server {{ $address.IP }}:{{ $address.Port }};
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}
}
{{ end }}

{{ define "locations" }}
{{ range $subdir, $containers := groupByMulti $ "Env.NGINX_PROXY_SUBDIRECTORY" "," }}
        {{ $trailing_slash := or (first (groupByKeys $containers "Env.NGINX_PROXY_SUBDIRECTORY_TRAILING_SLASH")) "1" }}
        {{ if eq $trailing_slash "1" }}
        location /{{ $subdir }}/ {
        {{ else }}
        location /{{ $subdir }} {
        {{ end }}

	{{ $proto := or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http" }}
	{{ $map_to_root := or (first (groupByKeys $containers "Env.NGINX_PROXY_SUBDIRECTORY_MAP_TO_ROOT")) "1" }}
	{{ if eq $map_to_root "1" }}
		proxy_pass {{ $proto }}://{{ $subdir }}/;
	{{ else }}
		proxy_pass {{ $proto }}://{{ $subdir }};
	{{ end }}
	{{ if (exists (printf "/etc/nginx/htpasswd/%s" $subdir)) }}
		auth_basic	"Restricted {{ $subdir }}";
		auth_basic_user_file	{{ (printf "/etc/nginx/htpasswd/%s" $subdir) }};
	{{ end }}
	{{ if (exists (printf "/etc/nginx/vhost.d/%s_location" $subdir)) }}
		include {{ printf "/etc/nginx/vhost.d/%s_location" $subdir}};
	{{ else if (exists "/etc/nginx/vhost.d/default_location") }}
		include /etc/nginx/vhost.d/default_location;
	{{ end }}
	}
{{ end }}
{{ end }}
{{ $external_https_port := "[EXTERNAL_HTTPS_PORT]" }}

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

access_log off;

{{ if (exists "/etc/nginx/proxy.conf") }}
include /etc/nginx/proxy.conf;
{{ else }}
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
{{ end }}

{{ if (and (exists "/etc/nginx/certs/default.crt") (exists "/etc/nginx/certs/default.key")) }}

server {
	server_name _;
	listen 80;
	access_log /var/log/nginx/access.log vhost;
	{{ $pl := len $external_https_port }}
	{{ if eq $pl 0 }}
	return 301 https://$host$request_uri;
	{{ else }}
	return 301 https://$host:{{ $external_https_port }}$request_uri;
	{{ end }}
}

server {
	server_name _;
	listen 443;
	access_log /var/log/nginx/access.log vhost;

	ssl on;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;

	ssl_prefer_server_ciphers on;
	ssl_session_timeout 5m;
	ssl_session_cache shared:SSL:50m;

	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;

	{{ if (exists "/etc/nginx/certs/default.dhparam.pem") }}
	ssl_dhparam /etc/nginx/certs/default.dhparam.pem;
	{{ end }}

	add_header Strict-Transport-Security "max-age=31536000";

	{{ template "locations" $ }}
}

{{ else }}

server {
	server_name _;
	listen 80;
	access_log /var/log/nginx/access.log vhost;

	{{ template "locations" $ }}
}

{{ end }}
